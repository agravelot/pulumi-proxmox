// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ct

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Container struct {
	pulumi.CustomResourceState

	// The cloning configuration
	Clone ContainerClonePtrOutput `pulumi:"clone"`
	// The console configuration
	Console ContainerConsolePtrOutput `pulumi:"console"`
	// The CPU allocation
	Cpu ContainerCpuPtrOutput `pulumi:"cpu"`
	// The description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disks
	Disk ContainerDiskPtrOutput `pulumi:"disk"`
	// The initialization configuration
	Initialization ContainerInitializationPtrOutput `pulumi:"initialization"`
	// The memory allocation
	Memory ContainerMemoryPtrOutput `pulumi:"memory"`
	// The network interfaces
	NetworkInterfaces ContainerNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// The node name
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// The operating system configuration
	OperatingSystem ContainerOperatingSystemPtrOutput `pulumi:"operatingSystem"`
	// The ID of the pool to assign the container to
	PoolId pulumi.StringPtrOutput `pulumi:"poolId"`
	// Whether to start the container
	Started pulumi.BoolPtrOutput `pulumi:"started"`
	// Whether to create a template
	Template pulumi.BoolPtrOutput `pulumi:"template"`
	// The VM identifier
	VmId pulumi.IntPtrOutput `pulumi:"vmId"`
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOption) (*Container, error) {
	if args == nil || args.NodeName == nil {
		return nil, errors.New("missing required argument 'NodeName'")
	}
	if args == nil {
		args = &ContainerArgs{}
	}
	var resource Container
	err := ctx.RegisterResource("proxmox:CT/container:Container", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerState, opts ...pulumi.ResourceOption) (*Container, error) {
	var resource Container
	err := ctx.ReadResource("proxmox:CT/container:Container", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Container resources.
type containerState struct {
	// The cloning configuration
	Clone *ContainerClone `pulumi:"clone"`
	// The console configuration
	Console *ContainerConsole `pulumi:"console"`
	// The CPU allocation
	Cpu *ContainerCpu `pulumi:"cpu"`
	// The description
	Description *string `pulumi:"description"`
	// The disks
	Disk *ContainerDisk `pulumi:"disk"`
	// The initialization configuration
	Initialization *ContainerInitialization `pulumi:"initialization"`
	// The memory allocation
	Memory *ContainerMemory `pulumi:"memory"`
	// The network interfaces
	NetworkInterfaces []ContainerNetworkInterface `pulumi:"networkInterfaces"`
	// The node name
	NodeName *string `pulumi:"nodeName"`
	// The operating system configuration
	OperatingSystem *ContainerOperatingSystem `pulumi:"operatingSystem"`
	// The ID of the pool to assign the container to
	PoolId *string `pulumi:"poolId"`
	// Whether to start the container
	Started *bool `pulumi:"started"`
	// Whether to create a template
	Template *bool `pulumi:"template"`
	// The VM identifier
	VmId *int `pulumi:"vmId"`
}

type ContainerState struct {
	// The cloning configuration
	Clone ContainerClonePtrInput
	// The console configuration
	Console ContainerConsolePtrInput
	// The CPU allocation
	Cpu ContainerCpuPtrInput
	// The description
	Description pulumi.StringPtrInput
	// The disks
	Disk ContainerDiskPtrInput
	// The initialization configuration
	Initialization ContainerInitializationPtrInput
	// The memory allocation
	Memory ContainerMemoryPtrInput
	// The network interfaces
	NetworkInterfaces ContainerNetworkInterfaceArrayInput
	// The node name
	NodeName pulumi.StringPtrInput
	// The operating system configuration
	OperatingSystem ContainerOperatingSystemPtrInput
	// The ID of the pool to assign the container to
	PoolId pulumi.StringPtrInput
	// Whether to start the container
	Started pulumi.BoolPtrInput
	// Whether to create a template
	Template pulumi.BoolPtrInput
	// The VM identifier
	VmId pulumi.IntPtrInput
}

func (ContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerState)(nil)).Elem()
}

type containerArgs struct {
	// The cloning configuration
	Clone *ContainerClone `pulumi:"clone"`
	// The console configuration
	Console *ContainerConsole `pulumi:"console"`
	// The CPU allocation
	Cpu *ContainerCpu `pulumi:"cpu"`
	// The description
	Description *string `pulumi:"description"`
	// The disks
	Disk *ContainerDisk `pulumi:"disk"`
	// The initialization configuration
	Initialization *ContainerInitialization `pulumi:"initialization"`
	// The memory allocation
	Memory *ContainerMemory `pulumi:"memory"`
	// The network interfaces
	NetworkInterfaces []ContainerNetworkInterface `pulumi:"networkInterfaces"`
	// The node name
	NodeName string `pulumi:"nodeName"`
	// The operating system configuration
	OperatingSystem *ContainerOperatingSystem `pulumi:"operatingSystem"`
	// The ID of the pool to assign the container to
	PoolId *string `pulumi:"poolId"`
	// Whether to start the container
	Started *bool `pulumi:"started"`
	// Whether to create a template
	Template *bool `pulumi:"template"`
	// The VM identifier
	VmId *int `pulumi:"vmId"`
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	// The cloning configuration
	Clone ContainerClonePtrInput
	// The console configuration
	Console ContainerConsolePtrInput
	// The CPU allocation
	Cpu ContainerCpuPtrInput
	// The description
	Description pulumi.StringPtrInput
	// The disks
	Disk ContainerDiskPtrInput
	// The initialization configuration
	Initialization ContainerInitializationPtrInput
	// The memory allocation
	Memory ContainerMemoryPtrInput
	// The network interfaces
	NetworkInterfaces ContainerNetworkInterfaceArrayInput
	// The node name
	NodeName pulumi.StringInput
	// The operating system configuration
	OperatingSystem ContainerOperatingSystemPtrInput
	// The ID of the pool to assign the container to
	PoolId pulumi.StringPtrInput
	// Whether to start the container
	Started pulumi.BoolPtrInput
	// Whether to create a template
	Template pulumi.BoolPtrInput
	// The VM identifier
	VmId pulumi.IntPtrInput
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerArgs)(nil)).Elem()
}

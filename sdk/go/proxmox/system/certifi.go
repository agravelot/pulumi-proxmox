// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Certifi struct {
	pulumi.CustomResourceState

	// The PEM encoded certificate
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The PEM encoded certificate chain
	CertificateChain pulumi.StringPtrOutput `pulumi:"certificateChain"`
	// The expiration date
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The file name
	FileName pulumi.StringOutput `pulumi:"fileName"`
	// The issuer
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The node name
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// Whether to overwrite an existing certificate
	Overwrite pulumi.BoolPtrOutput `pulumi:"overwrite"`
	// The PEM encoded private key
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The public key size
	PublicKeySize pulumi.IntOutput `pulumi:"publicKeySize"`
	// The public key type
	PublicKeyType pulumi.StringOutput `pulumi:"publicKeyType"`
	// The SSL fingerprint
	SslFingerprint pulumi.StringOutput `pulumi:"sslFingerprint"`
	// The start date
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// The subject
	Subject pulumi.StringOutput `pulumi:"subject"`
	// The subject alternative names
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
}

// NewCertifi registers a new resource with the given unique name, arguments, and options.
func NewCertifi(ctx *pulumi.Context,
	name string, args *CertifiArgs, opts ...pulumi.ResourceOption) (*Certifi, error) {
	if args == nil || args.Certificate == nil {
		return nil, errors.New("missing required argument 'Certificate'")
	}
	if args == nil || args.NodeName == nil {
		return nil, errors.New("missing required argument 'NodeName'")
	}
	if args == nil || args.PrivateKey == nil {
		return nil, errors.New("missing required argument 'PrivateKey'")
	}
	if args == nil {
		args = &CertifiArgs{}
	}
	var resource Certifi
	err := ctx.RegisterResource("proxmox:System/certifi:Certifi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertifi gets an existing Certifi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertifi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertifiState, opts ...pulumi.ResourceOption) (*Certifi, error) {
	var resource Certifi
	err := ctx.ReadResource("proxmox:System/certifi:Certifi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certifi resources.
type certifiState struct {
	// The PEM encoded certificate
	Certificate *string `pulumi:"certificate"`
	// The PEM encoded certificate chain
	CertificateChain *string `pulumi:"certificateChain"`
	// The expiration date
	ExpirationDate *string `pulumi:"expirationDate"`
	// The file name
	FileName *string `pulumi:"fileName"`
	// The issuer
	Issuer *string `pulumi:"issuer"`
	// The node name
	NodeName *string `pulumi:"nodeName"`
	// Whether to overwrite an existing certificate
	Overwrite *bool `pulumi:"overwrite"`
	// The PEM encoded private key
	PrivateKey *string `pulumi:"privateKey"`
	// The public key size
	PublicKeySize *int `pulumi:"publicKeySize"`
	// The public key type
	PublicKeyType *string `pulumi:"publicKeyType"`
	// The SSL fingerprint
	SslFingerprint *string `pulumi:"sslFingerprint"`
	// The start date
	StartDate *string `pulumi:"startDate"`
	// The subject
	Subject *string `pulumi:"subject"`
	// The subject alternative names
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

type CertifiState struct {
	// The PEM encoded certificate
	Certificate pulumi.StringPtrInput
	// The PEM encoded certificate chain
	CertificateChain pulumi.StringPtrInput
	// The expiration date
	ExpirationDate pulumi.StringPtrInput
	// The file name
	FileName pulumi.StringPtrInput
	// The issuer
	Issuer pulumi.StringPtrInput
	// The node name
	NodeName pulumi.StringPtrInput
	// Whether to overwrite an existing certificate
	Overwrite pulumi.BoolPtrInput
	// The PEM encoded private key
	PrivateKey pulumi.StringPtrInput
	// The public key size
	PublicKeySize pulumi.IntPtrInput
	// The public key type
	PublicKeyType pulumi.StringPtrInput
	// The SSL fingerprint
	SslFingerprint pulumi.StringPtrInput
	// The start date
	StartDate pulumi.StringPtrInput
	// The subject
	Subject pulumi.StringPtrInput
	// The subject alternative names
	SubjectAlternativeNames pulumi.StringArrayInput
}

func (CertifiState) ElementType() reflect.Type {
	return reflect.TypeOf((*certifiState)(nil)).Elem()
}

type certifiArgs struct {
	// The PEM encoded certificate
	Certificate string `pulumi:"certificate"`
	// The PEM encoded certificate chain
	CertificateChain *string `pulumi:"certificateChain"`
	// The node name
	NodeName string `pulumi:"nodeName"`
	// Whether to overwrite an existing certificate
	Overwrite *bool `pulumi:"overwrite"`
	// The PEM encoded private key
	PrivateKey string `pulumi:"privateKey"`
}

// The set of arguments for constructing a Certifi resource.
type CertifiArgs struct {
	// The PEM encoded certificate
	Certificate pulumi.StringInput
	// The PEM encoded certificate chain
	CertificateChain pulumi.StringPtrInput
	// The node name
	NodeName pulumi.StringInput
	// Whether to overwrite an existing certificate
	Overwrite pulumi.BoolPtrInput
	// The PEM encoded private key
	PrivateKey pulumi.StringInput
}

func (CertifiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certifiArgs)(nil)).Elem()
}

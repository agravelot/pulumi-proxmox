// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DNS struct {
	pulumi.CustomResourceState

	// The DNS search domain
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The node name
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// The DNS servers
	Servers pulumi.StringArrayOutput `pulumi:"servers"`
}

// NewDNS registers a new resource with the given unique name, arguments, and options.
func NewDNS(ctx *pulumi.Context,
	name string, args *DNSArgs, opts ...pulumi.ResourceOption) (*DNS, error) {
	if args == nil || args.Domain == nil {
		return nil, errors.New("missing required argument 'Domain'")
	}
	if args == nil || args.NodeName == nil {
		return nil, errors.New("missing required argument 'NodeName'")
	}
	if args == nil {
		args = &DNSArgs{}
	}
	var resource DNS
	err := ctx.RegisterResource("proxmox:System/dNS:DNS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNS gets an existing DNS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSState, opts ...pulumi.ResourceOption) (*DNS, error) {
	var resource DNS
	err := ctx.ReadResource("proxmox:System/dNS:DNS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNS resources.
type dnsState struct {
	// The DNS search domain
	Domain *string `pulumi:"domain"`
	// The node name
	NodeName *string `pulumi:"nodeName"`
	// The DNS servers
	Servers []string `pulumi:"servers"`
}

type DNSState struct {
	// The DNS search domain
	Domain pulumi.StringPtrInput
	// The node name
	NodeName pulumi.StringPtrInput
	// The DNS servers
	Servers pulumi.StringArrayInput
}

func (DNSState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsState)(nil)).Elem()
}

type dnsArgs struct {
	// The DNS search domain
	Domain string `pulumi:"domain"`
	// The node name
	NodeName string `pulumi:"nodeName"`
	// The DNS servers
	Servers []string `pulumi:"servers"`
}

// The set of arguments for constructing a DNS resource.
type DNSArgs struct {
	// The DNS search domain
	Domain pulumi.StringInput
	// The node name
	NodeName pulumi.StringInput
	// The DNS servers
	Servers pulumi.StringArrayInput
}

func (DNSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsArgs)(nil)).Elem()
}

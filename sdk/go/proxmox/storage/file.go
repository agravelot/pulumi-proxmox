// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type File struct {
	pulumi.CustomResourceState

	// The content type
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// The datastore id
	DatastoreId pulumi.StringOutput `pulumi:"datastoreId"`
	// The file modification date
	FileModificationDate pulumi.StringOutput `pulumi:"fileModificationDate"`
	// The file name
	FileName pulumi.StringOutput `pulumi:"fileName"`
	// The file size in bytes
	FileSize pulumi.IntOutput `pulumi:"fileSize"`
	// The file tag
	FileTag pulumi.StringOutput `pulumi:"fileTag"`
	// The node name
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// The source file
	SourceFile FileSourceFilePtrOutput `pulumi:"sourceFile"`
	// The raw source
	SourceRaw FileSourceRawPtrOutput `pulumi:"sourceRaw"`
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOption) (*File, error) {
	if args == nil || args.DatastoreId == nil {
		return nil, errors.New("missing required argument 'DatastoreId'")
	}
	if args == nil || args.NodeName == nil {
		return nil, errors.New("missing required argument 'NodeName'")
	}
	if args == nil {
		args = &FileArgs{}
	}
	var resource File
	err := ctx.RegisterResource("proxmox:Storage/file:File", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileState, opts ...pulumi.ResourceOption) (*File, error) {
	var resource File
	err := ctx.ReadResource("proxmox:Storage/file:File", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering File resources.
type fileState struct {
	// The content type
	ContentType *string `pulumi:"contentType"`
	// The datastore id
	DatastoreId *string `pulumi:"datastoreId"`
	// The file modification date
	FileModificationDate *string `pulumi:"fileModificationDate"`
	// The file name
	FileName *string `pulumi:"fileName"`
	// The file size in bytes
	FileSize *int `pulumi:"fileSize"`
	// The file tag
	FileTag *string `pulumi:"fileTag"`
	// The node name
	NodeName *string `pulumi:"nodeName"`
	// The source file
	SourceFile *FileSourceFile `pulumi:"sourceFile"`
	// The raw source
	SourceRaw *FileSourceRaw `pulumi:"sourceRaw"`
}

type FileState struct {
	// The content type
	ContentType pulumi.StringPtrInput
	// The datastore id
	DatastoreId pulumi.StringPtrInput
	// The file modification date
	FileModificationDate pulumi.StringPtrInput
	// The file name
	FileName pulumi.StringPtrInput
	// The file size in bytes
	FileSize pulumi.IntPtrInput
	// The file tag
	FileTag pulumi.StringPtrInput
	// The node name
	NodeName pulumi.StringPtrInput
	// The source file
	SourceFile FileSourceFilePtrInput
	// The raw source
	SourceRaw FileSourceRawPtrInput
}

func (FileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileState)(nil)).Elem()
}

type fileArgs struct {
	// The content type
	ContentType *string `pulumi:"contentType"`
	// The datastore id
	DatastoreId string `pulumi:"datastoreId"`
	// The node name
	NodeName string `pulumi:"nodeName"`
	// The source file
	SourceFile *FileSourceFile `pulumi:"sourceFile"`
	// The raw source
	SourceRaw *FileSourceRaw `pulumi:"sourceRaw"`
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	// The content type
	ContentType pulumi.StringPtrInput
	// The datastore id
	DatastoreId pulumi.StringInput
	// The node name
	NodeName pulumi.StringInput
	// The source file
	SourceFile FileSourceFilePtrInput
	// The raw source
	SourceRaw FileSourceRawPtrInput
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileArgs)(nil)).Elem()
}
